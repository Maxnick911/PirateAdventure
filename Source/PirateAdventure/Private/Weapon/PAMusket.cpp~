// Pirate Adventure Game Vietokhin AD211

#include "Weapon/PAMusket.h"
#include "Components/SkeletalMeshComponent.h"
#include "Weapon/PAMusketProjectile.h"
#include "Particles/ParticleSystemComponent.h"
#include "Kismet/GameplayStatics.h"

DEFINE_LOG_CATEGORY_STATIC(MusketLog, All, All)

USTRUCT(BlueprintType)
struct FAmmoData
{
    GENERATED_USTRUCT_BODY()
    
    UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = "Ammo")
    int32 Bullets;

    UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = "Ammo")
    int32 Clips;

    UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = "Ammo")
    bool Infinite;
};

APAMusket::APAMusket()
{
    PrimaryActorTick.bCanEverTick = false;

    MusketMesh = CreateDefaultSubobject<USkeletalMeshComponent>("MusketMesh");
    SetRootComponent(MusketMesh);

    MusketShotDelay = 0.3f;
    bCanShoot = true;
}

void APAMusket::BeginPlay()
{
    Super::BeginPlay();

    check(MusketMesh);

    AnimInstance = MusketMesh->GetAnimInstance();
}

void APAMusket::Fire()
{
    if (bCanShoot)
    {
        MakeShot();
        bCanShoot = false;
        GetWorldTimerManager().SetTimer(ShotTimerHandle, this, &APAMusket::EnableShoot, MusketShotDelay, false);
    }
}

void APAMusket::MakeShot()
{
    if (!GetWorld()) return;

    SpawnProjectile();
    SpawnSmokeEmitter();
    PlayShotSound();
    PlayShotAnimation();
}

void APAMusket::SpawnProjectile()
{
    const FTransform SpawnTransform = MusketMesh->GetSocketTransform(MuzzleSocketName);
    APAMusketProjectile* Projectile = GetWorld()->SpawnActorDeferred<APAMusketProjectile>(ProjectileClass, SpawnTransform);

    if (Projectile)
    {
        const FVector Direction = SpawnTransform.GetRotation().GetForwardVector();
        Projectile->SetShotDirection(Direction);
        Projectile->SetOwner(GetOwner());
        Projectile->FinishSpawning(SpawnTransform);
        
    }
}

void APAMusket::PlayShotSound()
{
    if (!MusketShotSound) return;

    const FTransform SpawnTransform = MusketMesh->GetSocketTransform(MuzzleSocketName);
    UGameplayStatics::PlaySoundAtLocation(this, MusketShotSound, SpawnTransform.GetLocation());
}

void APAMusket::SpawnSmokeEmitter()
{
    if (!GetWorld()) return;

    const FTransform SpawnTransform = MusketMesh->GetSocketTransform(MuzzleSocketName);
    const FVector SocketLocation = SpawnTransform.GetLocation();
    const FRotator SocketRotation = SpawnTransform.Rotator();

    UParticleSystemComponent* ParticleComponent = UGameplayStatics::SpawnEmitterAtLocation(GetWorld(), MuzzleFlashEmitter, SocketLocation, SocketRotation);

    if (ParticleComponent)
    {
        float SmokeEmitterLifeTime = 0.2f;

        FTimerDelegate EmitterDestroyTimerDelegate;
        EmitterDestroyTimerDelegate.BindLambda([=](){ ParticleComponent->DestroyComponent(); });
        GetWorldTimerManager().SetTimer(EmitterDestroyTimerHandle, EmitterDestroyTimerDelegate, SmokeEmitterLifeTime, false);
    }
}

void APAMusket::PlayShotAnimation()
{
    if(!AnimInstance) return;
    MusketMesh->PlayAnimation(ShotAnimation, false);
}
